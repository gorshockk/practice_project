from flask import Flask, render_template, request
import pickle
import numpy as np
import yfinance as yf
import pandas as pd

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
with open('model.pkl', 'rb') as f:
    model = pickle.load(f)

app = Flask(__name__)


def get_last_btc_day():
    import yfinance as yf

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    btc = yf.Ticker("BTC-USD")
    hist = btc.history(period="5d")

    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å—Ç—Ä–æ–∫–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
    last_two = hist.tail(2).reset_index()

    # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    last_two = last_two.drop(columns=["Dividends", "Stock Splits", "Date"])

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü Change (–∏–∑–º–µ–Ω–µ–Ω–∏–µ %)
    last_two["Change"] = last_two["Close"].pct_change() * 100

    return last_two.drop([0])

@app.route("/", methods=["GET", "POST"])
def index():
    prediction = None
    btc_features = {}

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ BTC
    try:
        btc_data = get_last_btc_day()
        row = btc_data.iloc[0]  # –ø–µ—Ä–≤–∞—è (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è) —Å—Ç—Ä–æ–∫–∞
        btc_features = {
            "Open": round(row["Open"], 2),
            "High": round(row["High"], 2),
            "Low": round(row["Low"], 2),
            "Close": round(row["Close"], 2),
            "Volume": round(row["Volume"], 2),
            "Change": round(row["Change"], 2)
        }
    except Exception as e:
        btc_features = {
            "Open": "‚Äî", "High": "‚Äî", "Low": "‚Äî",
            "Close": "‚Äî", "Volume": "‚Äî", "Change": "–û—à–∏–±–∫–∞"
        }

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    if request.method == "POST":
        try:
            data = [
                float(request.form["open"]),
                float(request.form["high"]),
                float(request.form["low"]),
                float(request.form["close"]),
                float(request.form["volume"]),
                float(request.form["change"])
            ]
            data = np.array(data).reshape(1, -1)
            result = model.predict(data)
            prediction = "–¶–µ–Ω–∞ –í–´–†–ê–°–¢–ï–¢ üöÄ" if result[0] == 1 else "–¶–µ–Ω–∞ –ù–ï –≤—ã—Ä–∞—Å—Ç–µ—Ç üìâ"
        except:
            prediction = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö"

    return render_template("index.html", prediction=prediction, btc_features=btc_features)


if __name__ == "__main__":
    app.run(debug=True)